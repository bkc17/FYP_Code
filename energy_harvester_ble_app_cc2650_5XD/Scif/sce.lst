               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0086                         dw          #compHandle/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 0089                         dw          #compHandle/execute
               pFwTaskTerminateFuncTable:
006a ---- 00f4                         dw          #compHandle/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: compHandle"
               compHandle/cfg:
               compHandle/input:
               compHandle/input/RotationEnable:
0075 ---- 0000                         dw          #0
               compHandle/input/TempEnable:
0076 ---- 0000                         dw          #0
               compHandle/input/VDDHoldEnable:
0077 ---- 0000                         dw          #0
               compHandle/output:
               compHandle/output/ADCout:
0078 ---- 0000                         dw          #0
               compHandle/output/TimeOutHigh:
0079 ---- 0000                         dw          #0
               compHandle/output/TimeOutHighArray:
007a ---- 0000                         dw          #0
007b ---- 0000                         dw          #0
007c ---- 0000                         dw          #0
007d ---- 0000                         dw          #0
007e ---- 0000                         dw          #0
               compHandle/output/TimeOutLow:
007f ---- 0000                         dw          #0
               compHandle/output/TimeOutLowArray:
0080 ---- 0000                         dw          #0
0081 ---- 0000                         dw          #0
0082 ---- 0000                         dw          #0
0083 ---- 0000                         dw          #0
0084 ---- 0000                         dw          #0
               compHandle/state:
               compHandle/state/compOut:
0085 ---- 0000                         dw          #0
               .segment end "Task: compHandle"


               .segment begin "Task: compHandle"
               compHandle/initialize:
               ;? fwScheduleTask(1);
0086 ---- 0001                         ld          R0, #1
0087 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               compHandle/initializeDone:
0088 ---- adb7                         rts




               compHandle/execute:
               ;? if(input.VDDHoldEnable == 1){
0089 ---- 0877                         ld          R0, [#compHandle/input/VDDHoldEnable]
008a ---- 8a01                         cmp         R0, #1
008b ---- be02                         bneq        /id0182
               ;?     gpioSetOutput(AUXIO_O_VDD_HOLD);
008c ---- 650f                             iobset      #(9 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (9 >> 3))]
               ;? }else{
008d ---- 048f                         jmp         /id0184
               /id0182:
               ;?     gpioClearOutput(AUXIO_O_VDD_HOLD);
008e ---- 450f                             iobclr      #(9 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (9 >> 3))]
               ;? }
               /id0184:
               ;?
               ;? //we can also enable the LED here to indicate measurements being made maybe? So that all ioid pins are in one place.
               ;?
               ;? if(input.TempEnable == 1){
008f ---- 0876                         ld          R0, [#compHandle/input/TempEnable]
0090 ---- 8a01                         cmp         R0, #1
0091 ---- be27                         bneq        /id0185
               ;?     fwAcquirePeripheral(PERIPHERAL_ADC);
               /id0187:
0092 ---- 241c                             iobtst      #0, [#(IOP_SMPH_SMPH0 + 2)]
0093 ---- a6fe                             biob0       /id0187
               ;?
               ;?     // Set Temp_VDD high
               ;?     gpioSetOutput(AUXIO_O_TEMP_VDD);
0094 ---- 770e                             iobset      #(7 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;?
               ;?     fwDelayUs(2000,FW_DELAY_RANGE_2_MS);
0095 ---- 70bc                             ld          R7, #(((2000 * 24 ) + ((1 << 8) - 1)) >> 8)
0096 ---- 6008                             ld          R6, #8
0097 ---- 14f5                             jsr         FwDelay
               ;?
               ;?     //Select ADC input
               ;?     adcSelectGpioInput(AUXIO_A_TEMP_VOUT);
0098 ---- 7006                             ld          R7, #6
0099 ---- 14fb                             jsr         AdccompbSelectGpioInput
               ;?
               ;?     // Enable the ADC, 4.3v fixed ref and 2.73ms sample period
               ;?     adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P73_MS, ADC_TRIGGER_MANUAL);
009a ---- f502                             loop        #128, /id0193
009b ---- fd47                             nop
009c ---- fd47                             nop
009d ---- fd47                             nop
               /id0193:
009e ---- 7001                             ld          R7, #((0 | (((13 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
009f ---- 1462                             jsr         AdiDdiAcquire
00a0 ---- fb4d                             out         R7, [#IOP_ADISET_ADCREF]
00a1 8609 7101                             ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
00a3 ---- 6431                             iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0194:
00a4 ---- 2531                             iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
00a5 ---- a6fe                             biob0       /id0194
00a6 ---- fb00                             out         R7, [#IOP_ANAIF_ADCCTL]
00a7 ---- 7078                             ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
00a8 ---- fb54                             out         R7, [#IOP_ADICLR_ADC]
00a9 ---- 7068                             ld          R7, #(13 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
00aa ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00ab ---- 7003                             ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
00ac ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00ad ---- fd47                             nop
00ae ---- fb4c                             out         R7, [#IOP_ADISET_ADC]
00af ---- 1465                             jsr         AdiDdiRelease
               ;?
               ;?     adcGenManualTrigger(); //trigger ADC
00b0 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?
               ;?     adcReadFifo(output.ADCout); //Load value into output variable
00b1 ---- 001f                             ld          R0, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00b2 ---- 8b2c                             out         R0, [#IOP_EVCTL_SCEWEVSEL]
00b3 ---- fdb1                             wev1        #WEVSEL_PROG
00b4 ---- 8902                             in          R0, [#IOP_ANAIF_ADCFIFO]
00b5 ---- 0c78                             st          R0, [#compHandle/output/ADCout]
               ;?
               ;?     adcDisable(); //Turn off ADC to save power
00b6 ---- 1508                             jsr         AdcDisable
               ;?
               ;?     fwReleasePeripheral(PERIPHERAL_ADC);
00b7 ---- 641c                             iobset      #0, [#(IOP_SMPH_SMPH0 + 2)]
               ;?
               ;?     gpioClearOutput(AUXIO_O_TEMP_VDD);
00b8 ---- 570e                             iobclr      #(7 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (7 >> 3))]
               ;? }
               /id0185:
               ;?
               ;? if(input.RotationEnable == 1){
00b9 ---- 0875                         ld          R0, [#compHandle/input/RotationEnable]
00ba ---- 8a01                         cmp         R0, #1
00bb ---- be32                         bneq        /id0200
               ;?     //Select 48 MHz from RCOSC_HF as TDC counter clock source
               ;?     tdcSetCntSource(TDC_CNTSRC_96M_RCOSC);
00bc ---- 1462                             jsr         AdiDdiAcquire
00bd ---- 0180                             ld          R0, #BV_DDI16_OSCCTL0L_ACLK_TDC_SRC
00be 86a0 8b80                             out         R0, [#IOP_DDICLR_OSCCTL0L]
00c0 ---- 0000                             ld          R0, #0
00c1 86a0 8b40                             out         R0, [#IOP_DDISET_OSCCTL0L]
00c3 ---- fd47                             nop
00c4 86a0 8900                             in          R0, [#IOP_DDI_OSCCTL0L]
00c6 ---- 1465                             jsr         AdiDdiRelease
               ;?
               ;?     //Enable COMPA
               ;?     compaEnable();
00c7 ---- 1513                             jsr         CompaEnable
               ;?
               ;?     //Select COMPA reference and input
               ;?     compaSelectGpioRef(AUXIO_A_COMP1);
00c8 ---- 7004                             ld          R7, #4
00c9 ---- 151d                             jsr         CompaSelectGpioRef
               ;?
               ;?     compaSelectGpioInput(AUXIO_A_COMP2);
00ca ---- 7005                             ld          R7, #5
00cb ---- 152c                             jsr         CompaSelectGpioInput
               ;?
               ;?     fwAcquirePeripheral(PERIPHERAL_TDC);
               /id0210:
00cc ---- 241b                             iobtst      #0, [#(IOP_SMPH_SMPH0 + 1)]
00cd ---- a6fe                             biob0       /id0210
               ;?
               ;?     //Enable TDC, start with trigger on first rising edge, and stop on first subsequent falling edge
               ;?     tdcSetTriggers(TDC_STARTTRIG_COMPA_HIGH,TDC_STOPTRIG_COMPA_LOW,0);
00ce ---- 0000                             ld          R0, #0
00cf 8621 1101                             ld          R1, #(1 | (33 << 8))
00d1 ---- 9b08                             out         R1, [#IOP_TDC_TRIGSRC]
00d2 8640 8b18                             out         R0, [#IOP_TDC_TRIGCNTLOAD]
00d4 8640 641c                             iobset      #0, [#IOP_TDC_TRIGCNTCFG]
               ;?
               ;?     tdcEnable();
00d6 ---- 1539                             jsr         TdcEnable
               ;?
               ;?     gpioSetOutput(AUXIO_O_BQDISABLE);
00d7 ---- 670e                             iobset      #(3 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (3 >> 3))]
               ;?
               ;?     fwDelayUs(25000,FW_DELAY_RANGE_50_MS);
00d8 ---- 704a                             ld          R7, #(((25000 * 24 ) + ((1 << 13) - 1)) >> 13)
00d9 ---- 600d                             ld          R6, #13
00da ---- 14f5                             jsr         FwDelay
               ;?
               ;?     for(U16 n = 0; n < ARRAY_SIZE; n++){
00db ---- 0000                             ld          R0, #0
               /id0224:
               ;?
               ;?         //Enable to the measurement to start synchoronously at first start trigger
               ;?         tdcArm(TDC_START_SYNC);
00dc ---- 7001                                 ld          R7, #1
00dd ---- 153d                                 jsr         TdcArm
               ;?
               ;?         fwDelayUs(20000,FW_DELAY_RANGE_100_MS);
00de ---- 701e                                 ld          R7, #(((20000 * 24 ) + ((1 << 14) - 1)) >> 14)
00df ---- 600e                                 ld          R6, #14
00e0 ---- 14f5                                 jsr         FwDelay
               ;?         //fwDelayUs(50000,FW_DELAY_RANGE_100_MS);
               ;?         //Check that TDC has finished and not TIme out
               ;?         //tdcCheckDoneEv(state.compOut);
               ;?         //if(state.compOut == 1){
               ;?         tdcGetValue(output.TimeOutHighArray[n],output.TimeOutLowArray[n]);
00e1 ---- e907                                 in          R6, [#IOP_TDC_RESULT_H]
00e2 ---- f906                                 in          R7, [#IOP_TDC_RESULT_L]
00e3 ---- 107a                                 ld          R1, #(compHandle/output/TimeOutHighArray + 0)
00e4 ---- ef39                                 st          R6, [R1+R0]
00e5 ---- 1080                                 ld          R1, #(compHandle/output/TimeOutLowArray + 0)
00e6 ---- ff39                                 st          R7, [R1+R0]
               ;?         //}
               ;?
               ;?     }
00e7 ---- 8801                             add         R0, #1
00e8 ---- 8a05                             cmp         R0, #5
00e9 ---- aef2                             bltu        /id0224
               ;?
               ;?     gpioClearOutput(AUXIO_O_BQDISABLE);
00ea ---- 470e                             iobclr      #(3 & 0x7), [#(IOP_AIODIO0_GPIODOUT + (3 >> 3))]
               ;?
               ;?     tdcDisable();
00eb ---- 1549                             jsr         TdcDisable
               ;?
               ;?     fwReleasePeripheral(PERIPHERAL_TDC);
00ec ---- 641b                             iobset      #0, [#(IOP_SMPH_SMPH0 + 1)]
               ;?
               ;?     compaDisable();
00ed ---- 154f                             jsr         CompaDisable
               ;? }
               /id0200:
               ;? fwGenAlertInterrupt();
00ee ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
00ef ---- 8201                         or          R0, #(1 << 0)
00f0 ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? fwScheduleTask(1);
00f1 ---- 0001                         ld          R0, #1
00f2 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               compHandle/executeDone:
00f3 ---- adb7                         rts




               compHandle/terminate:
               ;? //Could move task alert to here?
               compHandle/terminateDone:
00f4 ---- adb7                         rts
               .segment end "Task: compHandle"


               .segment begin "Procedure Library"
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
00f5 ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]

                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
00f6 ---- eda4                         lsl         R6, #4
00f7 ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]

                                       ; Start the timer, wait for it to trigger, and stop it
00f8 ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
00f9 ---- cdb1                         wev1        #WEVSEL_TIMER0
00fa ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
00fb ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
00fc ---- 1462                         jsr         AdiDdiAcquire
00fd 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
00ff ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
0100 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
0102 ---- ed8f                         lsr         R6, R7
0103 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
0104 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0105 ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
0106 ---- 1465                         jsr         AdiDdiRelease
0107 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
0108 ---- 1462                         jsr         AdiDdiAcquire
0109 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
010a ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
010b ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
010c ---- fb54                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Ensure that it has taken effect
010d ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
010e ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
010f ---- 1465                         jsr         AdiDdiRelease

                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
0110 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]

                                       ; Disable the ADC data interface
0111 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

0112 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               CompaEnable:
                                       ; Enable BGAP request
0113 ---- 643c                         iobset      #0, [#IOP_WUC_BGAPREQ]
0114 ---- 243d /waitOnBgap:            iobtst      #0, [#IOP_WUC_BGAPACK]
0115 ---- a6fe                         biob0       /waitOnBgap

                                       ; Enable COMPA
0116 ---- 1462                         jsr         AdiDdiAcquire
0117 ---- 7100                         ld          R7, #ADI16_COMP_COMPA_EN
0118 ---- fb4a                         out         R7, [#IOP_ADISET_ISRC_COMP]

                                       ; Ensure that it has taken effect
0119 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
011a ---- fb4a                         out         R7, [#IOP_ADISET_ISRC_COMP]
011b ---- 1465                         jsr         AdiDdiRelease
011c ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               CompaSelectGpioRef:
                                       ; Make sure that the AUX I/O index is valid
011d ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
011e ---- 1462                         jsr         AdiDdiAcquire
011f ---- 600f                         ld          R6, #BV_ADI16_MUX0_COMPA_REF
0120 ---- eb50                         out         R6, [#IOP_ADICLR_MUX0_MUX1]
0121 86ff 6300                         ld          R6, #BV_ADI16_MUX4_COMPA_REF
0123 ---- eb53                         out         R6, [#IOP_ADICLR_CHPTEST_MUX4]

                                       ; Connect the specified GPIO
0124 8680 6000                         ld          R6, #ADI16_MUX4_COMPA_REF_AUXIO0
0126 ---- ed8f                         lsr         R6, R7
0127 ---- eb4b                         out         R6, [#IOP_ADISET_CHPTEST_MUX4]

                                       ; Ensure that it has taken effect
0128 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0129 ---- eb4b                         out         R6, [#IOP_ADISET_CHPTEST_MUX4]
012a ---- 1465                         jsr         AdiDdiRelease
012b ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               CompaSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
012c ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
012d ---- 1462                         jsr         AdiDdiAcquire
012e 86ff 63f0                         ld          R6, #(BV_ADI16_MUX0_COMPA_IN | BV_ADI16_MUX1_COMPA_IN)
0130 ---- eb50                         out         R6, [#IOP_ADICLR_MUX0_MUX1]

                                       ; Connect the specified GPIO
0131 8680 6000                         ld          R6, #ADI16_MUX1_COMPA_IN_AUXIO0
0133 ---- ed8f                         lsr         R6, R7
0134 ---- eb48                         out         R6, [#IOP_ADISET_MUX0_MUX1]

                                       ; Ensure that it has taken effect
0135 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0136 ---- eb48                         out         R6, [#IOP_ADISET_MUX0_MUX1]
0137 ---- 1465                         jsr         AdiDdiRelease
0138 ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               TdcEnable:
                                       ; Enable the TDC clock
0139 ---- 6432                         iobset      #IOB_WUC_TDCCLKCTL_REQ, [#IOP_WUC_TDCCLKCTL]
013a ---- 2532 /waitOnTdcclk:          iobtst      #IOB_WUC_TDCCLKCTL_ACK, [#IOP_WUC_TDCCLKCTL]
013b ---- a6fe                         biob0       /waitOnTdcclk

013c ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = Mode of operation
               ;
               ; CLOBBERS:
               ;     R6
               TdcArm:
                                       ; Abort the TDC
013d ---- 6003                         ld          R6, #0x0003
013e ---- eb04                         out         R6, [#IOP_TDC_CTL]

                                       ; Set the saturation limit to maximum, and use an AUX timer for timeout
013f ---- 600f                         ld          R6, #15
0140 8640 eb0c                         out         R6, [#IOP_TDC_SATCFG]

                                       ; Reset the TDC result
0142 ---- 6000                         ld          R6, #0x0000
0143 ---- eb04                         out         R6, [#IOP_TDC_CTL]

                                       ; Arm the TDC
0144 ---- fb04                         out         R7, [#IOP_TDC_CTL]

                                       ; Clear the TDC_DONE event (moved after arming to allow for signal propagation)
0145 ---- 7641                         iobset      #IOB_EVCTL_EVTOAON_TDC_DONE, [#IOP_EVCTL_EVTOAONFLAGSCLR]

                                       ; Wait for 8 clock cycles for the TDC to get ready before generating the start trigger
0146 ---- a500                         loop        #4, /loopEnd
0147 ---- fd47                             nop
               /loopEnd:
0148 ---- adb7                         rts




               ; CLOBBERS:
               ;     -
               TdcDisable:
                                       ; Abort the TDC
0149 ---- 6003                         ld          R6, #0x0003
014a ---- eb04                         out         R6, [#IOP_TDC_CTL]

                                       ; Disable the TDC clock
014b ---- 4432                         iobclr      #IOB_WUC_TDCCLKCTL_REQ, [#IOP_WUC_TDCCLKCTL]
014c ---- 2532 /waitOnTdcclk:          iobtst      #IOB_WUC_TDCCLKCTL_ACK, [#IOP_WUC_TDCCLKCTL]
014d ---- aefe                         biob1       /waitOnTdcclk

014e ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               CompaDisable:
                                       ; Disable COMPA
014f ---- 1462                         jsr         AdiDdiAcquire
0150 86ff 7300                         ld          R7, #0xFF00
0152 ---- fb52                         out         R7, [#IOP_ADICLR_ISRC_COMP]

                                       ; Ensure that it has taken effect
0153 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0154 ---- fb52                         out         R7, [#IOP_ADICLR_ISRC_COMP]
0155 ---- 1465                         jsr         AdiDdiRelease

                                       ; Disable BGAP request
0156 ---- 443c                         iobclr      #0, [#IOP_WUC_BGAPREQ]
0157 ---- 243d /waitOnBgap:            iobtst      #0, [#IOP_WUC_BGAPACK]
0158 ---- aefe                         biob1       /waitOnBgap

0159 ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by BHARAT-DELL-LAP at 2022-06-13 16:03:52.958
